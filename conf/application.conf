# https://www.playframework.com/documentation/latest/Configuration

play.i18n.langs=["en"]

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

play.http.errorHandler = play.api.http.HtmlOrJsonHttpErrorHandler

play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"
play.modules.enabled += com.ironhorsesoftware.play.silhouette.persistence.SlickPersistenceModule

slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
slick.dbs.default.db.properties.url=${?JDBC_DATABASE_URL}
slick.dbs.default.db.properties.user=${?JDBC_DATABASE_USERNAME}
slick.dbs.default.db.properties.password=${?JDBC_DATABASE_PASSWORD}
slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"
slick.dbs.default.db.numThreads=20
slick.dbs.default.db.maxConnections=20

silhouette {

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.cookie.signer.key = "changeme1" // A unique encryption key

  authenticator.signer.key = "changeme2" // A unique encryption key
  authenticator.crypter.key = "changeme3" // A unique encryption key

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.expirationTime=5 minutes

  oauth1TokenSecretProvider.signer.key = "[changeme]" // A unique encryption key
  oauth1TokenSecretProvider.crypter.key = "[changeme]" // A unique encryption key

  # Social State Handler
  socialStateHandler.signer.key = "[changeme]" // A unique encryption key

  # CSRF state item handler settings
  csrfStateItemHandler.cookieName="OAuth2State"
  csrfStateItemHandler.cookiePath="/"
  csrfStateItemHandler.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  csrfStateItemHandler.httpOnlyCookie=true
  csrfStateItemHandler.sameSite="Lax"
  csrfStateItemHandler.expirationTime=5 minutes

  csrfStateItemHandler.signer.key = "[changeme]" // A unique encryption key

  # Twitter provider
  twitter.requestTokenURL="https://twitter.com/oauth/request_token"
  twitter.accessTokenURL="https://twitter.com/oauth/access_token"
  twitter.authorizationURL="https://twitter.com/oauth/authenticate"
  twitter.callbackURL="http://localhost:9000/authenticate/twitter"
  twitter.consumerKey=""
  twitter.consumerKey=${?TWITTER_CONSUMER_KEY}
  twitter.consumerSecret=""
  twitter.consumerSecret=${?TWITTER_CONSUMER_SECRET}

  # Facebook provider
  facebook.authorizationURL="https://graph.facebook.com/v2.3/oauth/authorize"
  facebook.accessTokenURL="https://graph.facebook.com/v2.3/oauth/access_token"
  facebook.redirectURL="http://localhost:9000/authenticate/facebook"
  facebook.clientID=""
  facebook.clientID=${?FACEBOOK_CLIENT_ID}
  facebook.clientSecret=""
  facebook.clientSecret=${?FACEBOOK_CLIENT_SECRET}
  facebook.scope="email"

  # Google provider
  google.authorizationURL="https://accounts.google.com/o/oauth2/auth"
  google.accessTokenURL="https://accounts.google.com/o/oauth2/token"
  google.redirectURL="http://localhost:9000/authenticate/google"
  google.clientID=""
  google.clientSecret=""
  google.scope="profile email https://www.googleapis.com/auth/userinfo.profile"

  linkedin {
    authorizationURL="https://www.linkedin.com/oauth/v2/authorization"
    accessTokenURL="https://www.linkedin.com/oauth/v2/accessToken"
    redirectURL="https://solid.vip/authenticate/linkedin"
    clientID="your.client.id"
    clientSecret="your.client.secret"
    scope="r_liteprofile r_emailaddress"
    apiURL="https://api.linkedin.com/v2/me?projection=(id,localizedFirstName,localizedLastName,localizedHeadline,vanityName,profilePicture(displayImage~playableStreams))"
  }

  github {
    authorizationURL="https://github.com/login/oauth/authorize"
    accessTokenURL="https://github.com/login/oauth/access_token"
    redirectURL="https://solid.vip/authenticate/github"
    clientID="your.client.id"
    clientSecret="your.client.secret"
    scope="public_repo read:org user:email read:user"
  }
}

mongodb.uri="mongodb://localhost:27017/solid-vip"
